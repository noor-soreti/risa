import { createSlice } from "@reduxjs/toolkit"
// import { loginUser, registerUser } from "../../userThunk";
import { loginUser, register } from "./userThunk";

interface UserState {
  user: User | null;
  loading: boolean;
  error: string | null;
}

const initialState: UserState = {
    user: null,
    loading: false,
    error: null
}

const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
      logout: (state) => {
        state.user = null
      }
    },
    // extraReducers -> let's you respond to actions defined outside of the slice (i.e. actions generated by thunks)
    extraReducers: (builder) => {
        builder // adds case for each action type generated by thunk

        // login
        .addCase(loginUser.pending, (state) => {
            state.loading = true
            state.error = null
        })
        .addCase(loginUser.fulfilled, (state, action) => {
            state.loading = false
            state.user = action.payload
        })
        .addCase(loginUser.rejected, (state, action) => {
            state.loading = false
            state.error = action.payload
        })

        // register 
        .addCase(register.pending, (state) => {
            state.loading = true
            state.error = null
        })
        .addCase(register.fulfilled, (state, action) => {
            state.loading = false            
            state.user = action.payload
        })
        .addCase(register.rejected, (state, action) => {
            state.loading = false
            state.error = action.payload
        })
    }
  });

export const { logout } = userSlice.actions
export default userSlice.reducer